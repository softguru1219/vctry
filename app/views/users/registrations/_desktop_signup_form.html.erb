<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: {:class=>'signing_form__panel needs-validation', novalidate: true, :oninput=>'user_password_confirmation.setCustomValidity(user_password_confirmation.value != user_password.value ? "Passwords do not match." : "")'}) do |f| %>
  <% if flash[:signup_alert].present? %>
    <div class="alert-message">
      <div class="alert alert-danger alert-dismissible fade show">
        <strong><%= I18n.t('errors.titles.warning')%></strong>
        <span><%= flash[:signup_alert] %></span>
        <button type="button" class="close" data-dismiss="alert">&times;</button>
      </div>
    </div>
  <% end %>
  <div class="form-group wrap-input100">
    <%= f.label :username, I18n.t('user.labels.username') %>
    <%= f.text_field :username, autocomplete: "username", :class=>"input100 form-control", :placeholder=>I18n.t('user.placefolders.username'), :required=>true %>
    <div class="invalid-feedback yellow">
      <%= I18n.t('user.hints.username') %>
    </div>
  </div>

  <div class="form-group wrap-input100">
    <%= f.label :email, I18n.t('user.labels.email') %>
    <%= f.email_field :email, autocomplete: "email", :class=>"input100 form-control", :placeholder=>I18n.t('user.placefolders.email'), :required=>true %>
    <div class="invalid-feedback yellow">
      <%= I18n.t('user.hints.email') %>
    </div>
  </div>
  
  <div class="form-group wrap-input100">
    <%= f.label :password, I18n.t('user.labels.password') %>
    <% if @minimum_password_length %>
      <em>(<%= @minimum_password_length %> characters minimum)</em>
    <% end %>
    <%= f.password_field :password, autocomplete: "new-password", :class=>"input100 form-control", :placeholder=>I18n.t('user.placefolders.password'), :pattern=>"(?=.*[a-z])(?=.*[A-Z]).{6,}", :required=>true %>
    <div class="invalid-feedback yellow">
      <%= I18n.t('user.hints.password') %>
    </div>
  </div>
  
  <div class="form-group wrap-input100">
    <%= f.label :password_confirmation, I18n.t('user.labels.confirm_password') %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password", :class=>"input100 form-control", :placeholder=>I18n.t('user.placefolders.confirm_password'), :required=>true %>
    <div class="invalid-feedback yellow">
      <%= I18n.t('user.hints.confirm_password') %>
    </div>
  </div>
  <input type="hidden" id="desktop_signup" name="desktop_signup" value="true">
  <div class="form-group wrap-input100">
    <%= f.check_box :terms_and_conditions %>
    <span><%= I18n.t('user.titles.terms_agree') %> <a href="<%= terms_path %>" target="_blank" class="terms"><%= I18n.t('user.titles.terms_condition') %> &</a> <a href="<%= privacy_path %>" target="_blank" class="terms"><%= I18n.t('user.titles.privacy') %> &</a> <a href="<%= legal_notice_path %>" target="_blank" class="terms"><%= I18n.t('user.titles.legal_notice') %></a></span>
  </div>
  <input type="hidden" id="desktop" name="desktop" value="true">
  <button type="submit" class="btn btn-default submit-button my-3 desktop-signup text-uppercase" style="font-size: 0.7rem"><%= I18n.t('button.continue') %></button>
<% end %>

<script>
  $('.desktop-signup').click(function() {
  // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      });
    });
  });
</script>